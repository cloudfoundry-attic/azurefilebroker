// Code generated by counterfeiter. DO NOT EDIT.
package azurefilebrokerfakes

import (
	"sync"

	"code.cloudfoundry.org/azurefilebroker/azurefilebroker"
)

type FakeAzureStorageAccountSDKClient struct {
	ExistsStub        func() (bool, error)
	existsMutex       sync.RWMutex
	existsArgsForCall []struct{}
	existsReturns     struct {
		result1 bool
		result2 error
	}
	existsReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	GetAccessKeyStub        func() (string, error)
	getAccessKeyMutex       sync.RWMutex
	getAccessKeyArgsForCall []struct{}
	getAccessKeyReturns     struct {
		result1 string
		result2 error
	}
	getAccessKeyReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	DeleteStorageAccountStub        func() error
	deleteStorageAccountMutex       sync.RWMutex
	deleteStorageAccountArgsForCall []struct{}
	deleteStorageAccountReturns     struct {
		result1 error
	}
	deleteStorageAccountReturnsOnCall map[int]struct {
		result1 error
	}
	HasFileShareStub        func(fileShareName string) (bool, error)
	hasFileShareMutex       sync.RWMutex
	hasFileShareArgsForCall []struct {
		fileShareName string
	}
	hasFileShareReturns struct {
		result1 bool
		result2 error
	}
	hasFileShareReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	CreateFileShareStub        func(fileShareName string) error
	createFileShareMutex       sync.RWMutex
	createFileShareArgsForCall []struct {
		fileShareName string
	}
	createFileShareReturns struct {
		result1 error
	}
	createFileShareReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteFileShareStub        func(fileShareName string) error
	deleteFileShareMutex       sync.RWMutex
	deleteFileShareArgsForCall []struct {
		fileShareName string
	}
	deleteFileShareReturns struct {
		result1 error
	}
	deleteFileShareReturnsOnCall map[int]struct {
		result1 error
	}
	GetShareURLStub        func(fileShareName string) (string, error)
	getShareURLMutex       sync.RWMutex
	getShareURLArgsForCall []struct {
		fileShareName string
	}
	getShareURLReturns struct {
		result1 string
		result2 error
	}
	getShareURLReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAzureStorageAccountSDKClient) Exists() (bool, error) {
	fake.existsMutex.Lock()
	ret, specificReturn := fake.existsReturnsOnCall[len(fake.existsArgsForCall)]
	fake.existsArgsForCall = append(fake.existsArgsForCall, struct{}{})
	fake.recordInvocation("Exists", []interface{}{})
	fake.existsMutex.Unlock()
	if fake.ExistsStub != nil {
		return fake.ExistsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.existsReturns.result1, fake.existsReturns.result2
}

func (fake *FakeAzureStorageAccountSDKClient) ExistsCallCount() int {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	return len(fake.existsArgsForCall)
}

func (fake *FakeAzureStorageAccountSDKClient) ExistsReturns(result1 bool, result2 error) {
	fake.ExistsStub = nil
	fake.existsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeAzureStorageAccountSDKClient) ExistsReturnsOnCall(i int, result1 bool, result2 error) {
	fake.ExistsStub = nil
	if fake.existsReturnsOnCall == nil {
		fake.existsReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.existsReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeAzureStorageAccountSDKClient) GetAccessKey() (string, error) {
	fake.getAccessKeyMutex.Lock()
	ret, specificReturn := fake.getAccessKeyReturnsOnCall[len(fake.getAccessKeyArgsForCall)]
	fake.getAccessKeyArgsForCall = append(fake.getAccessKeyArgsForCall, struct{}{})
	fake.recordInvocation("GetAccessKey", []interface{}{})
	fake.getAccessKeyMutex.Unlock()
	if fake.GetAccessKeyStub != nil {
		return fake.GetAccessKeyStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getAccessKeyReturns.result1, fake.getAccessKeyReturns.result2
}

func (fake *FakeAzureStorageAccountSDKClient) GetAccessKeyCallCount() int {
	fake.getAccessKeyMutex.RLock()
	defer fake.getAccessKeyMutex.RUnlock()
	return len(fake.getAccessKeyArgsForCall)
}

func (fake *FakeAzureStorageAccountSDKClient) GetAccessKeyReturns(result1 string, result2 error) {
	fake.GetAccessKeyStub = nil
	fake.getAccessKeyReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAzureStorageAccountSDKClient) GetAccessKeyReturnsOnCall(i int, result1 string, result2 error) {
	fake.GetAccessKeyStub = nil
	if fake.getAccessKeyReturnsOnCall == nil {
		fake.getAccessKeyReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getAccessKeyReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAzureStorageAccountSDKClient) DeleteStorageAccount() error {
	fake.deleteStorageAccountMutex.Lock()
	ret, specificReturn := fake.deleteStorageAccountReturnsOnCall[len(fake.deleteStorageAccountArgsForCall)]
	fake.deleteStorageAccountArgsForCall = append(fake.deleteStorageAccountArgsForCall, struct{}{})
	fake.recordInvocation("DeleteStorageAccount", []interface{}{})
	fake.deleteStorageAccountMutex.Unlock()
	if fake.DeleteStorageAccountStub != nil {
		return fake.DeleteStorageAccountStub()
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteStorageAccountReturns.result1
}

func (fake *FakeAzureStorageAccountSDKClient) DeleteStorageAccountCallCount() int {
	fake.deleteStorageAccountMutex.RLock()
	defer fake.deleteStorageAccountMutex.RUnlock()
	return len(fake.deleteStorageAccountArgsForCall)
}

func (fake *FakeAzureStorageAccountSDKClient) DeleteStorageAccountReturns(result1 error) {
	fake.DeleteStorageAccountStub = nil
	fake.deleteStorageAccountReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAzureStorageAccountSDKClient) DeleteStorageAccountReturnsOnCall(i int, result1 error) {
	fake.DeleteStorageAccountStub = nil
	if fake.deleteStorageAccountReturnsOnCall == nil {
		fake.deleteStorageAccountReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteStorageAccountReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAzureStorageAccountSDKClient) HasFileShare(fileShareName string) (bool, error) {
	fake.hasFileShareMutex.Lock()
	ret, specificReturn := fake.hasFileShareReturnsOnCall[len(fake.hasFileShareArgsForCall)]
	fake.hasFileShareArgsForCall = append(fake.hasFileShareArgsForCall, struct {
		fileShareName string
	}{fileShareName})
	fake.recordInvocation("HasFileShare", []interface{}{fileShareName})
	fake.hasFileShareMutex.Unlock()
	if fake.HasFileShareStub != nil {
		return fake.HasFileShareStub(fileShareName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.hasFileShareReturns.result1, fake.hasFileShareReturns.result2
}

func (fake *FakeAzureStorageAccountSDKClient) HasFileShareCallCount() int {
	fake.hasFileShareMutex.RLock()
	defer fake.hasFileShareMutex.RUnlock()
	return len(fake.hasFileShareArgsForCall)
}

func (fake *FakeAzureStorageAccountSDKClient) HasFileShareArgsForCall(i int) string {
	fake.hasFileShareMutex.RLock()
	defer fake.hasFileShareMutex.RUnlock()
	return fake.hasFileShareArgsForCall[i].fileShareName
}

func (fake *FakeAzureStorageAccountSDKClient) HasFileShareReturns(result1 bool, result2 error) {
	fake.HasFileShareStub = nil
	fake.hasFileShareReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeAzureStorageAccountSDKClient) HasFileShareReturnsOnCall(i int, result1 bool, result2 error) {
	fake.HasFileShareStub = nil
	if fake.hasFileShareReturnsOnCall == nil {
		fake.hasFileShareReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.hasFileShareReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeAzureStorageAccountSDKClient) CreateFileShare(fileShareName string) error {
	fake.createFileShareMutex.Lock()
	ret, specificReturn := fake.createFileShareReturnsOnCall[len(fake.createFileShareArgsForCall)]
	fake.createFileShareArgsForCall = append(fake.createFileShareArgsForCall, struct {
		fileShareName string
	}{fileShareName})
	fake.recordInvocation("CreateFileShare", []interface{}{fileShareName})
	fake.createFileShareMutex.Unlock()
	if fake.CreateFileShareStub != nil {
		return fake.CreateFileShareStub(fileShareName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createFileShareReturns.result1
}

func (fake *FakeAzureStorageAccountSDKClient) CreateFileShareCallCount() int {
	fake.createFileShareMutex.RLock()
	defer fake.createFileShareMutex.RUnlock()
	return len(fake.createFileShareArgsForCall)
}

func (fake *FakeAzureStorageAccountSDKClient) CreateFileShareArgsForCall(i int) string {
	fake.createFileShareMutex.RLock()
	defer fake.createFileShareMutex.RUnlock()
	return fake.createFileShareArgsForCall[i].fileShareName
}

func (fake *FakeAzureStorageAccountSDKClient) CreateFileShareReturns(result1 error) {
	fake.CreateFileShareStub = nil
	fake.createFileShareReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAzureStorageAccountSDKClient) CreateFileShareReturnsOnCall(i int, result1 error) {
	fake.CreateFileShareStub = nil
	if fake.createFileShareReturnsOnCall == nil {
		fake.createFileShareReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createFileShareReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAzureStorageAccountSDKClient) DeleteFileShare(fileShareName string) error {
	fake.deleteFileShareMutex.Lock()
	ret, specificReturn := fake.deleteFileShareReturnsOnCall[len(fake.deleteFileShareArgsForCall)]
	fake.deleteFileShareArgsForCall = append(fake.deleteFileShareArgsForCall, struct {
		fileShareName string
	}{fileShareName})
	fake.recordInvocation("DeleteFileShare", []interface{}{fileShareName})
	fake.deleteFileShareMutex.Unlock()
	if fake.DeleteFileShareStub != nil {
		return fake.DeleteFileShareStub(fileShareName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteFileShareReturns.result1
}

func (fake *FakeAzureStorageAccountSDKClient) DeleteFileShareCallCount() int {
	fake.deleteFileShareMutex.RLock()
	defer fake.deleteFileShareMutex.RUnlock()
	return len(fake.deleteFileShareArgsForCall)
}

func (fake *FakeAzureStorageAccountSDKClient) DeleteFileShareArgsForCall(i int) string {
	fake.deleteFileShareMutex.RLock()
	defer fake.deleteFileShareMutex.RUnlock()
	return fake.deleteFileShareArgsForCall[i].fileShareName
}

func (fake *FakeAzureStorageAccountSDKClient) DeleteFileShareReturns(result1 error) {
	fake.DeleteFileShareStub = nil
	fake.deleteFileShareReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAzureStorageAccountSDKClient) DeleteFileShareReturnsOnCall(i int, result1 error) {
	fake.DeleteFileShareStub = nil
	if fake.deleteFileShareReturnsOnCall == nil {
		fake.deleteFileShareReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteFileShareReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAzureStorageAccountSDKClient) GetShareURL(fileShareName string) (string, error) {
	fake.getShareURLMutex.Lock()
	ret, specificReturn := fake.getShareURLReturnsOnCall[len(fake.getShareURLArgsForCall)]
	fake.getShareURLArgsForCall = append(fake.getShareURLArgsForCall, struct {
		fileShareName string
	}{fileShareName})
	fake.recordInvocation("GetShareURL", []interface{}{fileShareName})
	fake.getShareURLMutex.Unlock()
	if fake.GetShareURLStub != nil {
		return fake.GetShareURLStub(fileShareName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getShareURLReturns.result1, fake.getShareURLReturns.result2
}

func (fake *FakeAzureStorageAccountSDKClient) GetShareURLCallCount() int {
	fake.getShareURLMutex.RLock()
	defer fake.getShareURLMutex.RUnlock()
	return len(fake.getShareURLArgsForCall)
}

func (fake *FakeAzureStorageAccountSDKClient) GetShareURLArgsForCall(i int) string {
	fake.getShareURLMutex.RLock()
	defer fake.getShareURLMutex.RUnlock()
	return fake.getShareURLArgsForCall[i].fileShareName
}

func (fake *FakeAzureStorageAccountSDKClient) GetShareURLReturns(result1 string, result2 error) {
	fake.GetShareURLStub = nil
	fake.getShareURLReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAzureStorageAccountSDKClient) GetShareURLReturnsOnCall(i int, result1 string, result2 error) {
	fake.GetShareURLStub = nil
	if fake.getShareURLReturnsOnCall == nil {
		fake.getShareURLReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getShareURLReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAzureStorageAccountSDKClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	fake.getAccessKeyMutex.RLock()
	defer fake.getAccessKeyMutex.RUnlock()
	fake.deleteStorageAccountMutex.RLock()
	defer fake.deleteStorageAccountMutex.RUnlock()
	fake.hasFileShareMutex.RLock()
	defer fake.hasFileShareMutex.RUnlock()
	fake.createFileShareMutex.RLock()
	defer fake.createFileShareMutex.RUnlock()
	fake.deleteFileShareMutex.RLock()
	defer fake.deleteFileShareMutex.RUnlock()
	fake.getShareURLMutex.RLock()
	defer fake.getShareURLMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAzureStorageAccountSDKClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ azurefilebroker.AzureStorageAccountSDKClient = new(FakeAzureStorageAccountSDKClient)
