// Code generated by counterfeiter. DO NOT EDIT.
package azurefilebrokerfakes

import (
	"sync"

	"code.cloudfoundry.org/azurefilebroker/azurefilebroker"
)

type FakeAzureStorageAccountRESTClient struct {
	CreateStorageAccountStub        func() (string, error)
	createStorageAccountMutex       sync.RWMutex
	createStorageAccountArgsForCall []struct{}
	createStorageAccountReturns     struct {
		result1 string
		result2 error
	}
	createStorageAccountReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	CheckCompletionStub        func(asyncURL string) (bool, error)
	checkCompletionMutex       sync.RWMutex
	checkCompletionArgsForCall []struct {
		asyncURL string
	}
	checkCompletionReturns struct {
		result1 bool
		result2 error
	}
	checkCompletionReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAzureStorageAccountRESTClient) CreateStorageAccount() (string, error) {
	fake.createStorageAccountMutex.Lock()
	ret, specificReturn := fake.createStorageAccountReturnsOnCall[len(fake.createStorageAccountArgsForCall)]
	fake.createStorageAccountArgsForCall = append(fake.createStorageAccountArgsForCall, struct{}{})
	fake.recordInvocation("CreateStorageAccount", []interface{}{})
	fake.createStorageAccountMutex.Unlock()
	if fake.CreateStorageAccountStub != nil {
		return fake.CreateStorageAccountStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createStorageAccountReturns.result1, fake.createStorageAccountReturns.result2
}

func (fake *FakeAzureStorageAccountRESTClient) CreateStorageAccountCallCount() int {
	fake.createStorageAccountMutex.RLock()
	defer fake.createStorageAccountMutex.RUnlock()
	return len(fake.createStorageAccountArgsForCall)
}

func (fake *FakeAzureStorageAccountRESTClient) CreateStorageAccountReturns(result1 string, result2 error) {
	fake.CreateStorageAccountStub = nil
	fake.createStorageAccountReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAzureStorageAccountRESTClient) CreateStorageAccountReturnsOnCall(i int, result1 string, result2 error) {
	fake.CreateStorageAccountStub = nil
	if fake.createStorageAccountReturnsOnCall == nil {
		fake.createStorageAccountReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.createStorageAccountReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeAzureStorageAccountRESTClient) CheckCompletion(asyncURL string) (bool, error) {
	fake.checkCompletionMutex.Lock()
	ret, specificReturn := fake.checkCompletionReturnsOnCall[len(fake.checkCompletionArgsForCall)]
	fake.checkCompletionArgsForCall = append(fake.checkCompletionArgsForCall, struct {
		asyncURL string
	}{asyncURL})
	fake.recordInvocation("CheckCompletion", []interface{}{asyncURL})
	fake.checkCompletionMutex.Unlock()
	if fake.CheckCompletionStub != nil {
		return fake.CheckCompletionStub(asyncURL)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.checkCompletionReturns.result1, fake.checkCompletionReturns.result2
}

func (fake *FakeAzureStorageAccountRESTClient) CheckCompletionCallCount() int {
	fake.checkCompletionMutex.RLock()
	defer fake.checkCompletionMutex.RUnlock()
	return len(fake.checkCompletionArgsForCall)
}

func (fake *FakeAzureStorageAccountRESTClient) CheckCompletionArgsForCall(i int) string {
	fake.checkCompletionMutex.RLock()
	defer fake.checkCompletionMutex.RUnlock()
	return fake.checkCompletionArgsForCall[i].asyncURL
}

func (fake *FakeAzureStorageAccountRESTClient) CheckCompletionReturns(result1 bool, result2 error) {
	fake.CheckCompletionStub = nil
	fake.checkCompletionReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeAzureStorageAccountRESTClient) CheckCompletionReturnsOnCall(i int, result1 bool, result2 error) {
	fake.CheckCompletionStub = nil
	if fake.checkCompletionReturnsOnCall == nil {
		fake.checkCompletionReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.checkCompletionReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeAzureStorageAccountRESTClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createStorageAccountMutex.RLock()
	defer fake.createStorageAccountMutex.RUnlock()
	fake.checkCompletionMutex.RLock()
	defer fake.checkCompletionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAzureStorageAccountRESTClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ azurefilebroker.AzureStorageAccountRESTClient = new(FakeAzureStorageAccountRESTClient)
