// Code generated by counterfeiter. DO NOT EDIT.
package azurefilebrokerfakes

import (
	"sync"

	"code.cloudfoundry.org/azurefilebroker/azurefilebroker"
	"github.com/pivotal-cf/brokerapi"
)

type FakeStore struct {
	RetrieveServiceInstanceStub        func(id string) (azurefilebroker.ServiceInstance, error)
	retrieveServiceInstanceMutex       sync.RWMutex
	retrieveServiceInstanceArgsForCall []struct {
		id string
	}
	retrieveServiceInstanceReturns struct {
		result1 azurefilebroker.ServiceInstance
		result2 error
	}
	retrieveServiceInstanceReturnsOnCall map[int]struct {
		result1 azurefilebroker.ServiceInstance
		result2 error
	}
	RetrieveBindingDetailsStub        func(id string) (brokerapi.BindDetails, error)
	retrieveBindingDetailsMutex       sync.RWMutex
	retrieveBindingDetailsArgsForCall []struct {
		id string
	}
	retrieveBindingDetailsReturns struct {
		result1 brokerapi.BindDetails
		result2 error
	}
	retrieveBindingDetailsReturnsOnCall map[int]struct {
		result1 brokerapi.BindDetails
		result2 error
	}
	RetrieveFileShareStub        func(id string) (azurefilebroker.FileShare, error)
	retrieveFileShareMutex       sync.RWMutex
	retrieveFileShareArgsForCall []struct {
		id string
	}
	retrieveFileShareReturns struct {
		result1 azurefilebroker.FileShare
		result2 error
	}
	retrieveFileShareReturnsOnCall map[int]struct {
		result1 azurefilebroker.FileShare
		result2 error
	}
	CreateServiceInstanceStub        func(id string, instance azurefilebroker.ServiceInstance) error
	createServiceInstanceMutex       sync.RWMutex
	createServiceInstanceArgsForCall []struct {
		id       string
		instance azurefilebroker.ServiceInstance
	}
	createServiceInstanceReturns struct {
		result1 error
	}
	createServiceInstanceReturnsOnCall map[int]struct {
		result1 error
	}
	CreateBindingDetailsStub        func(id string, details brokerapi.BindDetails, redactRawParameter bool) error
	createBindingDetailsMutex       sync.RWMutex
	createBindingDetailsArgsForCall []struct {
		id                 string
		details            brokerapi.BindDetails
		redactRawParameter bool
	}
	createBindingDetailsReturns struct {
		result1 error
	}
	createBindingDetailsReturnsOnCall map[int]struct {
		result1 error
	}
	CreateFileShareStub        func(id string, share azurefilebroker.FileShare) error
	createFileShareMutex       sync.RWMutex
	createFileShareArgsForCall []struct {
		id    string
		share azurefilebroker.FileShare
	}
	createFileShareReturns struct {
		result1 error
	}
	createFileShareReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateFileShareStub        func(id string, share azurefilebroker.FileShare) error
	updateFileShareMutex       sync.RWMutex
	updateFileShareArgsForCall []struct {
		id    string
		share azurefilebroker.FileShare
	}
	updateFileShareReturns struct {
		result1 error
	}
	updateFileShareReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteServiceInstanceStub        func(id string) error
	deleteServiceInstanceMutex       sync.RWMutex
	deleteServiceInstanceArgsForCall []struct {
		id string
	}
	deleteServiceInstanceReturns struct {
		result1 error
	}
	deleteServiceInstanceReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteBindingDetailsStub        func(id string) error
	deleteBindingDetailsMutex       sync.RWMutex
	deleteBindingDetailsArgsForCall []struct {
		id string
	}
	deleteBindingDetailsReturns struct {
		result1 error
	}
	deleteBindingDetailsReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteFileShareStub        func(id string) error
	deleteFileShareMutex       sync.RWMutex
	deleteFileShareArgsForCall []struct {
		id string
	}
	deleteFileShareReturns struct {
		result1 error
	}
	deleteFileShareReturnsOnCall map[int]struct {
		result1 error
	}
	GetLockForUpdateStub        func(lockName string, timeoutInSeconds int) error
	getLockForUpdateMutex       sync.RWMutex
	getLockForUpdateArgsForCall []struct {
		lockName         string
		timeoutInSeconds int
	}
	getLockForUpdateReturns struct {
		result1 error
	}
	getLockForUpdateReturnsOnCall map[int]struct {
		result1 error
	}
	ReleaseLockForUpdateStub        func(lockName string) error
	releaseLockForUpdateMutex       sync.RWMutex
	releaseLockForUpdateArgsForCall []struct {
		lockName string
	}
	releaseLockForUpdateReturns struct {
		result1 error
	}
	releaseLockForUpdateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStore) RetrieveServiceInstance(id string) (azurefilebroker.ServiceInstance, error) {
	fake.retrieveServiceInstanceMutex.Lock()
	ret, specificReturn := fake.retrieveServiceInstanceReturnsOnCall[len(fake.retrieveServiceInstanceArgsForCall)]
	fake.retrieveServiceInstanceArgsForCall = append(fake.retrieveServiceInstanceArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("RetrieveServiceInstance", []interface{}{id})
	fake.retrieveServiceInstanceMutex.Unlock()
	if fake.RetrieveServiceInstanceStub != nil {
		return fake.RetrieveServiceInstanceStub(id)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.retrieveServiceInstanceReturns.result1, fake.retrieveServiceInstanceReturns.result2
}

func (fake *FakeStore) RetrieveServiceInstanceCallCount() int {
	fake.retrieveServiceInstanceMutex.RLock()
	defer fake.retrieveServiceInstanceMutex.RUnlock()
	return len(fake.retrieveServiceInstanceArgsForCall)
}

func (fake *FakeStore) RetrieveServiceInstanceArgsForCall(i int) string {
	fake.retrieveServiceInstanceMutex.RLock()
	defer fake.retrieveServiceInstanceMutex.RUnlock()
	return fake.retrieveServiceInstanceArgsForCall[i].id
}

func (fake *FakeStore) RetrieveServiceInstanceReturns(result1 azurefilebroker.ServiceInstance, result2 error) {
	fake.RetrieveServiceInstanceStub = nil
	fake.retrieveServiceInstanceReturns = struct {
		result1 azurefilebroker.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) RetrieveServiceInstanceReturnsOnCall(i int, result1 azurefilebroker.ServiceInstance, result2 error) {
	fake.RetrieveServiceInstanceStub = nil
	if fake.retrieveServiceInstanceReturnsOnCall == nil {
		fake.retrieveServiceInstanceReturnsOnCall = make(map[int]struct {
			result1 azurefilebroker.ServiceInstance
			result2 error
		})
	}
	fake.retrieveServiceInstanceReturnsOnCall[i] = struct {
		result1 azurefilebroker.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) RetrieveBindingDetails(id string) (brokerapi.BindDetails, error) {
	fake.retrieveBindingDetailsMutex.Lock()
	ret, specificReturn := fake.retrieveBindingDetailsReturnsOnCall[len(fake.retrieveBindingDetailsArgsForCall)]
	fake.retrieveBindingDetailsArgsForCall = append(fake.retrieveBindingDetailsArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("RetrieveBindingDetails", []interface{}{id})
	fake.retrieveBindingDetailsMutex.Unlock()
	if fake.RetrieveBindingDetailsStub != nil {
		return fake.RetrieveBindingDetailsStub(id)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.retrieveBindingDetailsReturns.result1, fake.retrieveBindingDetailsReturns.result2
}

func (fake *FakeStore) RetrieveBindingDetailsCallCount() int {
	fake.retrieveBindingDetailsMutex.RLock()
	defer fake.retrieveBindingDetailsMutex.RUnlock()
	return len(fake.retrieveBindingDetailsArgsForCall)
}

func (fake *FakeStore) RetrieveBindingDetailsArgsForCall(i int) string {
	fake.retrieveBindingDetailsMutex.RLock()
	defer fake.retrieveBindingDetailsMutex.RUnlock()
	return fake.retrieveBindingDetailsArgsForCall[i].id
}

func (fake *FakeStore) RetrieveBindingDetailsReturns(result1 brokerapi.BindDetails, result2 error) {
	fake.RetrieveBindingDetailsStub = nil
	fake.retrieveBindingDetailsReturns = struct {
		result1 brokerapi.BindDetails
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) RetrieveBindingDetailsReturnsOnCall(i int, result1 brokerapi.BindDetails, result2 error) {
	fake.RetrieveBindingDetailsStub = nil
	if fake.retrieveBindingDetailsReturnsOnCall == nil {
		fake.retrieveBindingDetailsReturnsOnCall = make(map[int]struct {
			result1 brokerapi.BindDetails
			result2 error
		})
	}
	fake.retrieveBindingDetailsReturnsOnCall[i] = struct {
		result1 brokerapi.BindDetails
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) RetrieveFileShare(id string) (azurefilebroker.FileShare, error) {
	fake.retrieveFileShareMutex.Lock()
	ret, specificReturn := fake.retrieveFileShareReturnsOnCall[len(fake.retrieveFileShareArgsForCall)]
	fake.retrieveFileShareArgsForCall = append(fake.retrieveFileShareArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("RetrieveFileShare", []interface{}{id})
	fake.retrieveFileShareMutex.Unlock()
	if fake.RetrieveFileShareStub != nil {
		return fake.RetrieveFileShareStub(id)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.retrieveFileShareReturns.result1, fake.retrieveFileShareReturns.result2
}

func (fake *FakeStore) RetrieveFileShareCallCount() int {
	fake.retrieveFileShareMutex.RLock()
	defer fake.retrieveFileShareMutex.RUnlock()
	return len(fake.retrieveFileShareArgsForCall)
}

func (fake *FakeStore) RetrieveFileShareArgsForCall(i int) string {
	fake.retrieveFileShareMutex.RLock()
	defer fake.retrieveFileShareMutex.RUnlock()
	return fake.retrieveFileShareArgsForCall[i].id
}

func (fake *FakeStore) RetrieveFileShareReturns(result1 azurefilebroker.FileShare, result2 error) {
	fake.RetrieveFileShareStub = nil
	fake.retrieveFileShareReturns = struct {
		result1 azurefilebroker.FileShare
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) RetrieveFileShareReturnsOnCall(i int, result1 azurefilebroker.FileShare, result2 error) {
	fake.RetrieveFileShareStub = nil
	if fake.retrieveFileShareReturnsOnCall == nil {
		fake.retrieveFileShareReturnsOnCall = make(map[int]struct {
			result1 azurefilebroker.FileShare
			result2 error
		})
	}
	fake.retrieveFileShareReturnsOnCall[i] = struct {
		result1 azurefilebroker.FileShare
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) CreateServiceInstance(id string, instance azurefilebroker.ServiceInstance) error {
	fake.createServiceInstanceMutex.Lock()
	ret, specificReturn := fake.createServiceInstanceReturnsOnCall[len(fake.createServiceInstanceArgsForCall)]
	fake.createServiceInstanceArgsForCall = append(fake.createServiceInstanceArgsForCall, struct {
		id       string
		instance azurefilebroker.ServiceInstance
	}{id, instance})
	fake.recordInvocation("CreateServiceInstance", []interface{}{id, instance})
	fake.createServiceInstanceMutex.Unlock()
	if fake.CreateServiceInstanceStub != nil {
		return fake.CreateServiceInstanceStub(id, instance)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createServiceInstanceReturns.result1
}

func (fake *FakeStore) CreateServiceInstanceCallCount() int {
	fake.createServiceInstanceMutex.RLock()
	defer fake.createServiceInstanceMutex.RUnlock()
	return len(fake.createServiceInstanceArgsForCall)
}

func (fake *FakeStore) CreateServiceInstanceArgsForCall(i int) (string, azurefilebroker.ServiceInstance) {
	fake.createServiceInstanceMutex.RLock()
	defer fake.createServiceInstanceMutex.RUnlock()
	return fake.createServiceInstanceArgsForCall[i].id, fake.createServiceInstanceArgsForCall[i].instance
}

func (fake *FakeStore) CreateServiceInstanceReturns(result1 error) {
	fake.CreateServiceInstanceStub = nil
	fake.createServiceInstanceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) CreateServiceInstanceReturnsOnCall(i int, result1 error) {
	fake.CreateServiceInstanceStub = nil
	if fake.createServiceInstanceReturnsOnCall == nil {
		fake.createServiceInstanceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createServiceInstanceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) CreateBindingDetails(id string, details brokerapi.BindDetails, redactRawParameter bool) error {
	fake.createBindingDetailsMutex.Lock()
	ret, specificReturn := fake.createBindingDetailsReturnsOnCall[len(fake.createBindingDetailsArgsForCall)]
	fake.createBindingDetailsArgsForCall = append(fake.createBindingDetailsArgsForCall, struct {
		id                 string
		details            brokerapi.BindDetails
		redactRawParameter bool
	}{id, details, redactRawParameter})
	fake.recordInvocation("CreateBindingDetails", []interface{}{id, details, redactRawParameter})
	fake.createBindingDetailsMutex.Unlock()
	if fake.CreateBindingDetailsStub != nil {
		return fake.CreateBindingDetailsStub(id, details, redactRawParameter)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createBindingDetailsReturns.result1
}

func (fake *FakeStore) CreateBindingDetailsCallCount() int {
	fake.createBindingDetailsMutex.RLock()
	defer fake.createBindingDetailsMutex.RUnlock()
	return len(fake.createBindingDetailsArgsForCall)
}

func (fake *FakeStore) CreateBindingDetailsArgsForCall(i int) (string, brokerapi.BindDetails, bool) {
	fake.createBindingDetailsMutex.RLock()
	defer fake.createBindingDetailsMutex.RUnlock()
	return fake.createBindingDetailsArgsForCall[i].id, fake.createBindingDetailsArgsForCall[i].details, fake.createBindingDetailsArgsForCall[i].redactRawParameter
}

func (fake *FakeStore) CreateBindingDetailsReturns(result1 error) {
	fake.CreateBindingDetailsStub = nil
	fake.createBindingDetailsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) CreateBindingDetailsReturnsOnCall(i int, result1 error) {
	fake.CreateBindingDetailsStub = nil
	if fake.createBindingDetailsReturnsOnCall == nil {
		fake.createBindingDetailsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createBindingDetailsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) CreateFileShare(id string, share azurefilebroker.FileShare) error {
	fake.createFileShareMutex.Lock()
	ret, specificReturn := fake.createFileShareReturnsOnCall[len(fake.createFileShareArgsForCall)]
	fake.createFileShareArgsForCall = append(fake.createFileShareArgsForCall, struct {
		id    string
		share azurefilebroker.FileShare
	}{id, share})
	fake.recordInvocation("CreateFileShare", []interface{}{id, share})
	fake.createFileShareMutex.Unlock()
	if fake.CreateFileShareStub != nil {
		return fake.CreateFileShareStub(id, share)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createFileShareReturns.result1
}

func (fake *FakeStore) CreateFileShareCallCount() int {
	fake.createFileShareMutex.RLock()
	defer fake.createFileShareMutex.RUnlock()
	return len(fake.createFileShareArgsForCall)
}

func (fake *FakeStore) CreateFileShareArgsForCall(i int) (string, azurefilebroker.FileShare) {
	fake.createFileShareMutex.RLock()
	defer fake.createFileShareMutex.RUnlock()
	return fake.createFileShareArgsForCall[i].id, fake.createFileShareArgsForCall[i].share
}

func (fake *FakeStore) CreateFileShareReturns(result1 error) {
	fake.CreateFileShareStub = nil
	fake.createFileShareReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) CreateFileShareReturnsOnCall(i int, result1 error) {
	fake.CreateFileShareStub = nil
	if fake.createFileShareReturnsOnCall == nil {
		fake.createFileShareReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createFileShareReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) UpdateFileShare(id string, share azurefilebroker.FileShare) error {
	fake.updateFileShareMutex.Lock()
	ret, specificReturn := fake.updateFileShareReturnsOnCall[len(fake.updateFileShareArgsForCall)]
	fake.updateFileShareArgsForCall = append(fake.updateFileShareArgsForCall, struct {
		id    string
		share azurefilebroker.FileShare
	}{id, share})
	fake.recordInvocation("UpdateFileShare", []interface{}{id, share})
	fake.updateFileShareMutex.Unlock()
	if fake.UpdateFileShareStub != nil {
		return fake.UpdateFileShareStub(id, share)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.updateFileShareReturns.result1
}

func (fake *FakeStore) UpdateFileShareCallCount() int {
	fake.updateFileShareMutex.RLock()
	defer fake.updateFileShareMutex.RUnlock()
	return len(fake.updateFileShareArgsForCall)
}

func (fake *FakeStore) UpdateFileShareArgsForCall(i int) (string, azurefilebroker.FileShare) {
	fake.updateFileShareMutex.RLock()
	defer fake.updateFileShareMutex.RUnlock()
	return fake.updateFileShareArgsForCall[i].id, fake.updateFileShareArgsForCall[i].share
}

func (fake *FakeStore) UpdateFileShareReturns(result1 error) {
	fake.UpdateFileShareStub = nil
	fake.updateFileShareReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) UpdateFileShareReturnsOnCall(i int, result1 error) {
	fake.UpdateFileShareStub = nil
	if fake.updateFileShareReturnsOnCall == nil {
		fake.updateFileShareReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateFileShareReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) DeleteServiceInstance(id string) error {
	fake.deleteServiceInstanceMutex.Lock()
	ret, specificReturn := fake.deleteServiceInstanceReturnsOnCall[len(fake.deleteServiceInstanceArgsForCall)]
	fake.deleteServiceInstanceArgsForCall = append(fake.deleteServiceInstanceArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("DeleteServiceInstance", []interface{}{id})
	fake.deleteServiceInstanceMutex.Unlock()
	if fake.DeleteServiceInstanceStub != nil {
		return fake.DeleteServiceInstanceStub(id)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteServiceInstanceReturns.result1
}

func (fake *FakeStore) DeleteServiceInstanceCallCount() int {
	fake.deleteServiceInstanceMutex.RLock()
	defer fake.deleteServiceInstanceMutex.RUnlock()
	return len(fake.deleteServiceInstanceArgsForCall)
}

func (fake *FakeStore) DeleteServiceInstanceArgsForCall(i int) string {
	fake.deleteServiceInstanceMutex.RLock()
	defer fake.deleteServiceInstanceMutex.RUnlock()
	return fake.deleteServiceInstanceArgsForCall[i].id
}

func (fake *FakeStore) DeleteServiceInstanceReturns(result1 error) {
	fake.DeleteServiceInstanceStub = nil
	fake.deleteServiceInstanceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) DeleteServiceInstanceReturnsOnCall(i int, result1 error) {
	fake.DeleteServiceInstanceStub = nil
	if fake.deleteServiceInstanceReturnsOnCall == nil {
		fake.deleteServiceInstanceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteServiceInstanceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) DeleteBindingDetails(id string) error {
	fake.deleteBindingDetailsMutex.Lock()
	ret, specificReturn := fake.deleteBindingDetailsReturnsOnCall[len(fake.deleteBindingDetailsArgsForCall)]
	fake.deleteBindingDetailsArgsForCall = append(fake.deleteBindingDetailsArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("DeleteBindingDetails", []interface{}{id})
	fake.deleteBindingDetailsMutex.Unlock()
	if fake.DeleteBindingDetailsStub != nil {
		return fake.DeleteBindingDetailsStub(id)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteBindingDetailsReturns.result1
}

func (fake *FakeStore) DeleteBindingDetailsCallCount() int {
	fake.deleteBindingDetailsMutex.RLock()
	defer fake.deleteBindingDetailsMutex.RUnlock()
	return len(fake.deleteBindingDetailsArgsForCall)
}

func (fake *FakeStore) DeleteBindingDetailsArgsForCall(i int) string {
	fake.deleteBindingDetailsMutex.RLock()
	defer fake.deleteBindingDetailsMutex.RUnlock()
	return fake.deleteBindingDetailsArgsForCall[i].id
}

func (fake *FakeStore) DeleteBindingDetailsReturns(result1 error) {
	fake.DeleteBindingDetailsStub = nil
	fake.deleteBindingDetailsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) DeleteBindingDetailsReturnsOnCall(i int, result1 error) {
	fake.DeleteBindingDetailsStub = nil
	if fake.deleteBindingDetailsReturnsOnCall == nil {
		fake.deleteBindingDetailsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteBindingDetailsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) DeleteFileShare(id string) error {
	fake.deleteFileShareMutex.Lock()
	ret, specificReturn := fake.deleteFileShareReturnsOnCall[len(fake.deleteFileShareArgsForCall)]
	fake.deleteFileShareArgsForCall = append(fake.deleteFileShareArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("DeleteFileShare", []interface{}{id})
	fake.deleteFileShareMutex.Unlock()
	if fake.DeleteFileShareStub != nil {
		return fake.DeleteFileShareStub(id)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteFileShareReturns.result1
}

func (fake *FakeStore) DeleteFileShareCallCount() int {
	fake.deleteFileShareMutex.RLock()
	defer fake.deleteFileShareMutex.RUnlock()
	return len(fake.deleteFileShareArgsForCall)
}

func (fake *FakeStore) DeleteFileShareArgsForCall(i int) string {
	fake.deleteFileShareMutex.RLock()
	defer fake.deleteFileShareMutex.RUnlock()
	return fake.deleteFileShareArgsForCall[i].id
}

func (fake *FakeStore) DeleteFileShareReturns(result1 error) {
	fake.DeleteFileShareStub = nil
	fake.deleteFileShareReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) DeleteFileShareReturnsOnCall(i int, result1 error) {
	fake.DeleteFileShareStub = nil
	if fake.deleteFileShareReturnsOnCall == nil {
		fake.deleteFileShareReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteFileShareReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) GetLockForUpdate(lockName string, timeoutInSeconds int) error {
	fake.getLockForUpdateMutex.Lock()
	ret, specificReturn := fake.getLockForUpdateReturnsOnCall[len(fake.getLockForUpdateArgsForCall)]
	fake.getLockForUpdateArgsForCall = append(fake.getLockForUpdateArgsForCall, struct {
		lockName         string
		timeoutInSeconds int
	}{lockName, timeoutInSeconds})
	fake.recordInvocation("GetLockForUpdate", []interface{}{lockName, timeoutInSeconds})
	fake.getLockForUpdateMutex.Unlock()
	if fake.GetLockForUpdateStub != nil {
		return fake.GetLockForUpdateStub(lockName, timeoutInSeconds)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.getLockForUpdateReturns.result1
}

func (fake *FakeStore) GetLockForUpdateCallCount() int {
	fake.getLockForUpdateMutex.RLock()
	defer fake.getLockForUpdateMutex.RUnlock()
	return len(fake.getLockForUpdateArgsForCall)
}

func (fake *FakeStore) GetLockForUpdateArgsForCall(i int) (string, int) {
	fake.getLockForUpdateMutex.RLock()
	defer fake.getLockForUpdateMutex.RUnlock()
	return fake.getLockForUpdateArgsForCall[i].lockName, fake.getLockForUpdateArgsForCall[i].timeoutInSeconds
}

func (fake *FakeStore) GetLockForUpdateReturns(result1 error) {
	fake.GetLockForUpdateStub = nil
	fake.getLockForUpdateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) GetLockForUpdateReturnsOnCall(i int, result1 error) {
	fake.GetLockForUpdateStub = nil
	if fake.getLockForUpdateReturnsOnCall == nil {
		fake.getLockForUpdateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getLockForUpdateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) ReleaseLockForUpdate(lockName string) error {
	fake.releaseLockForUpdateMutex.Lock()
	ret, specificReturn := fake.releaseLockForUpdateReturnsOnCall[len(fake.releaseLockForUpdateArgsForCall)]
	fake.releaseLockForUpdateArgsForCall = append(fake.releaseLockForUpdateArgsForCall, struct {
		lockName string
	}{lockName})
	fake.recordInvocation("ReleaseLockForUpdate", []interface{}{lockName})
	fake.releaseLockForUpdateMutex.Unlock()
	if fake.ReleaseLockForUpdateStub != nil {
		return fake.ReleaseLockForUpdateStub(lockName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.releaseLockForUpdateReturns.result1
}

func (fake *FakeStore) ReleaseLockForUpdateCallCount() int {
	fake.releaseLockForUpdateMutex.RLock()
	defer fake.releaseLockForUpdateMutex.RUnlock()
	return len(fake.releaseLockForUpdateArgsForCall)
}

func (fake *FakeStore) ReleaseLockForUpdateArgsForCall(i int) string {
	fake.releaseLockForUpdateMutex.RLock()
	defer fake.releaseLockForUpdateMutex.RUnlock()
	return fake.releaseLockForUpdateArgsForCall[i].lockName
}

func (fake *FakeStore) ReleaseLockForUpdateReturns(result1 error) {
	fake.ReleaseLockForUpdateStub = nil
	fake.releaseLockForUpdateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) ReleaseLockForUpdateReturnsOnCall(i int, result1 error) {
	fake.ReleaseLockForUpdateStub = nil
	if fake.releaseLockForUpdateReturnsOnCall == nil {
		fake.releaseLockForUpdateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.releaseLockForUpdateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.retrieveServiceInstanceMutex.RLock()
	defer fake.retrieveServiceInstanceMutex.RUnlock()
	fake.retrieveBindingDetailsMutex.RLock()
	defer fake.retrieveBindingDetailsMutex.RUnlock()
	fake.retrieveFileShareMutex.RLock()
	defer fake.retrieveFileShareMutex.RUnlock()
	fake.createServiceInstanceMutex.RLock()
	defer fake.createServiceInstanceMutex.RUnlock()
	fake.createBindingDetailsMutex.RLock()
	defer fake.createBindingDetailsMutex.RUnlock()
	fake.createFileShareMutex.RLock()
	defer fake.createFileShareMutex.RUnlock()
	fake.updateFileShareMutex.RLock()
	defer fake.updateFileShareMutex.RUnlock()
	fake.deleteServiceInstanceMutex.RLock()
	defer fake.deleteServiceInstanceMutex.RUnlock()
	fake.deleteBindingDetailsMutex.RLock()
	defer fake.deleteBindingDetailsMutex.RUnlock()
	fake.deleteFileShareMutex.RLock()
	defer fake.deleteFileShareMutex.RUnlock()
	fake.getLockForUpdateMutex.RLock()
	defer fake.getLockForUpdateMutex.RUnlock()
	fake.releaseLockForUpdateMutex.RLock()
	defer fake.releaseLockForUpdateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ azurefilebroker.Store = new(FakeStore)
